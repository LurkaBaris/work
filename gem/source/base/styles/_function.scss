@function rem($size) {
	$remsize: $size / 16;

	@return #{$remsize}rem;
}

@mixin block($parent) {
	.#{$parent} {
		@content;
	}
}

@mixin element($parent, $name) {
	.#{$parent}__#{$name} {
		@content;
	}
}

@mixin element-next($parent, $name) {
	+ .#{$parent}__#{$name} {
		@content;
	}
}

@mixin modifier($parent, $name) {
	$length_check: str-length('#{$parent}') + 1;

	/* stylelint-disable */
	@if ($length_check == str-length('#{&}')) {
		$subQuery: $parent;

		@at-root &.#{$subQuery}--#{$name} {
			@content;
		}
	} @else {
		$length: str-length('.#{$parent} ');
		$subQuery: str-slice('#{&}', $length + 1);
		$query: '#{&}#{$subQuery}--#{$name}';

		@at-root #{$query} {
			@content;
		}
	}
	/* stylelint-enable */
}

@mixin fs($size, $line-height, $weight) {
	@if $size {
		font-size: rem($size);
	}

	@if ($line-height) {
		line-height: rem($line-height);
	}

	@if ($weight) {
		font-weight: $weight;
	}
}

@mixin flex($flex: flex, $align:false, $justify:false, $direction:false, $wrap: wrap) {
	display: $flex;

	@if ($wrap) {
		flex-wrap: wrap;
	}

	@if ($align) {
		align-items: $align;
	}

	@if ($justify) {
		justify-content: $justify;
	}

	@if ($direction) {
		flex-direction: $direction;
	}
}

@mixin flexWidth($size, $fix) {
	@if ($fix) {
		flex-basis: rem($size);
		max-width: rem($size);
	}

	@else {
		flex-basis: $size;
		max-width: $size;
	}
}

@mixin coverPseudo($bgColor, $opacity, $transition) {
	content: '';
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;

	@if ($bgColor) {
		background-color: $bgColor;
	}

	@if ($opacity) {
		opacity: $opacity;
	}

	@if ($transition) {
		transition: $transition;
	}
}
